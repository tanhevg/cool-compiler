 - Operators dealing with Int's and Bool's should load and store to the only attribute of respective objects (so the pointer plus 3 words)
 - Initialisation with constants should load the appropriate label to $a0, and then store $a0 in the right place in memory (heap or stack)
 
 - self should be passed in $a0 for coolaid. we store it in $s0; need to also store self in AR and put it back in $s0 on method return (callee responsibility)
 - use a scoped symbol table to figure out whether a symbol is a local variable (that includes method parameters) or an object attribute - object environment
 - the value in the symbol table is a record that has a register name ($t9 for attributes, $fp for variables and parameters) and an offset
 - each let expression creates a new temporary that is visible in the body; so the variable's offset from $fp can be either positive (parameters) or negative (let bindings)
 - object environment usage:
 -- add all class attributes to the top scope before visiting class; pop after
 -- add method parameter to the next scope before visitin method; pop after
 -- each let binding adds its variable to the new scope

 - Activation record layout:

     |----------------|
     | old $fp        |
     | arg 1          |
     | ...            |
     | arg N          |
     | return         | <---- $fp
     | old $s0 (self) |
     | temp 1         |
     | ....           |
     | temp N         |
     |----------------| <---- $sp points here after AR is fully formed
